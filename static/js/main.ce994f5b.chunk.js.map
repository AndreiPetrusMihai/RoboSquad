{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","className","alt","src","id","CardList","robots","cardArray","map","user","i","key","SearchBox","searchFiled","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","console","log","React","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","Helmet","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ce994f5b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = (props) =>{\r\n\t//destructuring\r\n\tconst {name,email} = props;\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<div>\r\n\t\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\tconst cardArray = robots.map((user,i) => \r\n\t\t{return (<Card \r\n\t\t\tkey={robots[i].id}  \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}/>)\r\n\t\t});\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardArray};\r\n  \t\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchFiled,searchChange}) => {\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype = 'search' placeholder='search robots' \r\n\t\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border:'5px solid black', height:'700px'}}>\r\n\t\t\t{props.children};\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport {setSearchField,requestRobots} from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots : state.requestRobots.robots,\r\n\t\tisPending : state.requestRobots.isPending,\r\n\t\terror : state.requestRobots.error\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots : () => dispatch(requestRobots())\r\n\t};\r\n};\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n\tcomponentDidMount(){\r\n\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {searchField,onSearchChange,robots,isPending} = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\tconsole.log(filteredRobots);\r\n\r\n\t\tif(isPending)\r\n\t\t{\r\n\t\t\treturn <h1>LOADING</h1>;\r\n\t\t}else{\r\n\t\t\treturn (\r\n\t\t\t\t<div className='tc'>\r\n\r\n\t\t\t\t\t<h1 className=\"f1\">Robo Friends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n\r\n\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn{\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload : text}\r\n}\r\n\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n\tdispatch({type : REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=>response.json())\r\n\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload : data}))\r\n\t.catch(err => dispatch({type: REQUEST_ROBOTS_FAILED,payload : err}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n\r\nconst initialState = {\r\n\tsearchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending : false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialState,action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({},state,{searchField: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots,action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn  Object.assign({},state,{isPending:true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn  Object.assign({},state,{robots:action.payload,isPending:false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn  Object.assign({},state,{error:action.payload,isPending:false});\r\n\t\tdefault:\r\n\t\t\treturn state;\t\r\n\t}\r\n}","import React from 'react';\nimport {Helmet} from \"react-helmet\";\n\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createLogger} from 'redux-logger'\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport './index.css';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchRobots,requestRobots} from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<Helmet>\n\t\t\t<title> Robo-Squad </title>\n\t\t</Helmet>\n\t\t<App />\n\t</Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}